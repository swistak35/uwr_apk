TYPE

  ConstSet       = set(snum)
  ConstSetList   = list(ConstSet)
  ConstFlattened = lift(ConstSet)
  State          = Var -> ConstFlattened

PROBLEM Parity_Analysis

  direction  : forward
  carrier    : State
  init       : bot
  init_start : [-> top]
  combine    : lub


TRANSFER

// in assignments calculate the new value of the variable and add it to the state
  ASSIGN(variable, expression) = 
      @\[variable -> evalAExp(expression, @)]

// in procedur calls pass the value of the actual argument to the formal parameter
  CALL(_, param, exp), call_edge = 
      @\[param -> evalAExp(exp, @)]

  CALL(_, _, _), local_edge = bot


// at the end of procedures reset the formal parameter
  END(_, param) =
      @\[param -> top]

SUPPORT

  evalAExp :: Expression * State -> ConstFlattened
  evalAExp(expression, state) =
    case expType(expression) of
      "ARITH_BINARY" => case expOp(expression) of
        "+" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                liftUp({ (x1 + x2) % 2 | x1 in valsLeft; x2 in valsRight });
        "-" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                liftUp({ (x1 + x2) % 2 | x1 in valsLeft; x2 in valsRight });
        "*" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                liftUp({ (x1 * x2) % 2 | x1 in valsLeft; x2 in valsRight });
        "/" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                if 0 ? valsRight
                then top
                else liftUp({ (x1 * x2) % 2 | x1 in valsLeft; x2 in valsRight })
                endif;
        endcase;
      "ARITH_UNARY" =>
        case expOp(expression) of
          "-" => evalAExp(expSub(expression), state);
        endcase;
      "VAR"   => state ( expVar(expression) );
      "CONST" => lift({ (expVal(expression) % 2) });
      _       => error("Runtime Error: evalAExp applied to nonarithmetic Expression");
    endcase

  liftUp :: ConstSet -> ConstFlattened
  liftUp(xs) =
    if xs = {0, 1}
    then top
    else lift(xs)
    endif
