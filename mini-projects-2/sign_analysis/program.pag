TYPE

  ConstSet       = set(snum)
  ConstSetList   = list(ConstSet)
  ConstFlattened = lift(ConstSet)
  State          = Var -> ConstFlattened

PROBLEM Sign_Analysis

  direction  : forward
  carrier    : State
  init       : bot
  init_start : [-> top]
  combine    : lub


TRANSFER

// in assignments calculate the new value of the variable and add it to the state
  ASSIGN(variable, expression) = 
      @\[variable -> evalAExp(expression, @)]

// in procedur calls pass the value of the actual argument to the formal parameter
  CALL(_, param, exp), call_edge = 
      @\[param -> evalAExp(exp, @)]

  CALL(_, _, _), local_edge = bot


// at the end of procedures reset the formal parameter
  END(_, param) =
      @\[param -> top]

SUPPORT

  evalAExp :: Expression * State -> ConstFlattened
  evalAExp(expression, state) =
    case expType(expression) of
      "ARITH_BINARY" => case expOp(expression) of
        "+" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                reduceSets([ plusop(x1, x2) | x1 in (valsLeft); x2 in (valsRight) ]);
        "-" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                reduceSets([ plusop(x1, x2) | x1 in (valsLeft); x2 in opposite(valsRight) ]);
        "*" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                liftUp({ x1*x2 | x1 in valsLeft; x2 in valsRight });
        "/" => let valsLeft  <= evalAExp(expSubLeft(expression),  state),
                   valsRight <= evalAExp(expSubRight(expression), state) in
                if 0 ? valsRight
                then top
                else liftUp({ x1*x2 | x1 in valsLeft; x2 in valsRight })
                endif;
        endcase;
      "ARITH_UNARY" =>
        case expOp(expression) of
          "-" => let vals <= evalAExp(expSub(expression), state) in
                   liftUp(opposite(vals));
        endcase;
      "VAR"   => state ( expVar(expression) );
      "CONST" => lift({ sgn(expVal(expression)) });
      _       => error("Runtime Error: evalAExp applied to nonarithmetic Expression");
    endcase

  opposite :: ConstSet -> ConstSet
  opposite(xs) = { -x | x in xs }

  plusop :: snum * snum -> ConstSet
  plusop(x1, x2) =
    let plusf = [->{42}] \ [
        (-1, -1) -> { -1 },
        (-1,  0) -> { -1 },
        (-1,  1) -> { -1, 0, 1 },
        ( 0, -1) -> { -1 },
        ( 0,  0) -> { 0 },
        ( 0,  1) -> { 1 },
        ( 1, -1) -> { -1, 0, 1 },
        ( 1,  0) -> { 1 },
        ( 1,  1) -> { 1 }
      ] in plusf((x1,x2))

  reduceSets :: ConstSetList -> ConstFlattened
  reduceSets([]) = liftUp({})
  reduceSets(x:[]) = liftUp(x)
  reduceSets(x1:x2:t) = reduceSets(union(x1, x2):t)

  liftUp :: ConstSet -> ConstFlattened
  liftUp(xs) =
    if xs = {-1, 0, 1}
    then top
    else lift(xs)
    endif
